import argparse
import importlib
import os
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor
from utils import save_results_to_file, check_security_headers, generic_vulnerability_scan

BANNER = r"""
Herramienta desarrollada por @Zuk4r1
██╗   ██╗██╗   ██╗██╗     ███╗   ██╗██╗  ██╗██╗  ████████╗
██║   ██║██║   ██║██║     ████╗  ██║██║ ██╔╝██║  ╚══██╔══╝
██║   ██║██║   ██║██║     ██╔██╗ ██║█████╔╝ ██║     ██║
╚██╗ ██╔╝██║   ██║██║     ██║╚██╗██║██╔═██╗ ██║     ██║
 ╚████╔╝ ╚██████╔╝███████╗██║ ╚████║██║  ██╗██║     ██║
  ╚═══╝   ╚═════╝ ╚══════╝╚═╝  ╚═══╝╚═╝  ╚═╝╚═╝     ╚═╝
    Escáner avanzado de vulnerabilidades y exploits.
"""

def list_exploits():
    return [
        "dt", "sqli", "rce", "ssrf", "xss",
        "deserialization", "ldap_injection", "csrf",
        "x_frame", "https", "file_upload", "graphql_injection"
    ]

def scan_file_uploads(target):
    print(f"[INFO] Escaneando cargas de archivos en {target}...")
    # Implementar lógica específica aquí.
    return [{"name": "File Upload Vulnerability", "details": "Posible carga insegura detectada."}]

def scan_graphql_injection(target):
    print(f"[INFO] Escaneando inyecciones en GraphQL en {target}...")
    # Implementar lógica específica aquí.
    return [{"name": "GraphQL Injection Vulnerability", "details": "Posible inyección detectada."}]

def run_exploit(exploit_name, target):
    try:
        print(f"[INFO] Cargando exploit: {exploit_name}")
        module = importlib.import_module(f"exploits.exploit_{exploit_name}")
        return module.execute(target)
    except ModuleNotFoundError:
        return f"[ERROR] Exploit '{exploit_name}' no encontrado."
    except Exception as e:
        return f"[ERROR] Error al ejecutar el exploit: {e}"

def scan_target(target, exploits_to_run, args):
    results = []
    
    with ThreadPoolExecutor() as executor:
        futures = []
        
        if args.scan_generic:
            print("[INFO] Realizando escaneo genérico de vulnerabilidades...")
            futures.append(executor.submit(generic_vulnerability_scan, target))

        if args.scan_headers:
            print("[INFO] Escaneando encabezados de seguridad...")
            futures.append(executor.submit(check_security_headers, target))

        if args.scan_file_upload:
            futures.append(executor.submit(scan_file_uploads, target))

        if args.scan_graphql_injection:
            futures.append(executor.submit(scan_graphql_injection, target))

        for exploit in exploits_to_run:
            futures.append(executor.submit(run_exploit, exploit, target))

        for future in futures:
            results.extend(future.result())

    return results

def main():
    print(BANNER)
    parser = argparse.ArgumentParser(description="Herramienta de auditoría de vulnerabilidades y explotación.")
    parser.add_argument("target", help="Dominio o IP del objetivo a analizar")
    parser.add_argument("--exploit", help="Nombre del exploit a ejecutar", choices=list_exploits())
    parser.add_argument("--scan-headers", action="store_true", help="Escanea encabezados de seguridad")
    parser.add_argument("--scan-all", action="store_true", help="Ejecuta todos los exploits disponibles")
    parser.add_argument("--scan-generic", action="store_true", help="Escanea vulnerabilidades genéricas no cubiertas por exploits")
    parser.add_argument("--scan-file-upload", action="store_true", help="Escanea vulnerabilidades de carga de archivos")
    parser.add_argument("--scan-graphql-injection", action="store_true", help="Escanea inyecciones en GraphQL")
    
    args = parser.parse_args()

    exploits_to_run = [args.exploit] if args.exploit else list_exploits()
    
    results = scan_target(args.target, exploits_to_run, args)

    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    output_file = f"Report_{timestamp}.txt"

    if results:
        print("\n[INFO] Resultados encontrados:")
        for result in results:
            print(f" - {result['name']}: {result['details']}")
        save_results_to_file(results, [], output_file)
        print(f"[INFO] Resultados guardados en {output_file}")
    else:
        print("\n[INFO] No se detectaron vulnerabilidades.")

if __name__ == "__main__":
    main()

