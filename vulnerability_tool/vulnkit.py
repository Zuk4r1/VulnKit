import argparse
import importlib
from utils import save_results_to_file, check_security_headers

BANNER = r"""
Herramienta desarrollada por @Zuk4r1
██╗   ██╗██╗   ██╗██╗     ███╗   ██╗██╗  ██╗██╗  ████████╗
██║   ██║██║   ██║██║     ████╗  ██║██║ ██╔╝██║  ╚══██╔══╝
██║   ██║██║   ██║██║     ██╔██╗ ██║█████╔╝ ██║     ██║
╚██╗ ██╔╝██║   ██║██║     ██║╚██╗██║██╔═██╗ ██║     ██║
 ╚████╔╝ ╚██████╔╝███████╗██║ ╚████║██║  ██╗██║     ██║
  ╚═══╝   ╚═════╝ ╚══════╝╚═╝  ╚═══╝╚═╝  ╚═╝╚═╝     ╚═╝
    Escáner avanzado de vulnerabilidades y exploits.
"""

def list_exploits():
    """
    Lista de exploits disponibles.
    """
    return ["dt", "sqli", "rce", "ssrf", "xss", "deserialization"]

def run_exploit(exploit_name, target):
    """
    Ejecuta un exploit específico contra el objetivo.
    """
    try:
        print(f"[INFO] Cargando exploit: {exploit_name}")
        module = importlib.import_module(f"exploits.exploit_{exploit_name}")
        return module.execute(target)
    except ModuleNotFoundError:
        return f"[ERROR] Exploit '{exploit_name}' no encontrado."
    except Exception as e:
        return f"[ERROR] Error al ejecutar el exploit: {e}"

def main():
    print(BANNER)
    parser = argparse.ArgumentParser(
        description="Herramienta de auditoría de vulnerabilidades y explotación. "
                    "Debe utilizarse únicamente con permisos explícitos."
    )
    parser.add_argument("target", help="Dominio o IP del objetivo a analizar")
    parser.add_argument("--exploit", help="Nombre del exploit a ejecutar", choices=list_exploits())
    parser.add_argument("--scan-headers", action="store_true", help="Escanea encabezados de seguridad")
    parser.add_argument("--scan-all", action="store_true", help="Ejecuta todos los exploits disponibles")
    args = parser.parse_args()

    results = []
    commands = []

    # Escaneo de encabezados
    if args.scan_headers:
        print("[INFO] Escaneando encabezados de seguridad...")
        headers_vulns = check_security_headers(args.target)
        results.extend(headers_vulns)
        commands.append("check_security_headers")

    # Ejecución de un exploit específico
    if args.exploit:
        print(f"[INFO] Ejecutando exploit: {args.exploit}")
        exploit_result = run_exploit(args.exploit, args.target)
        results.append({"name": f"Exploit: {args.exploit}", "details": exploit_result})
        commands.append(f"run_exploit {args.exploit} {args.target}")

    # Ejecución de todos los exploits
    if args.scan_all:
        print("[INFO] Ejecutando todos los exploits disponibles...")
        for exploit in list_exploits():
            print(f"[INFO] Ejecutando exploit: {exploit}")
            exploit_result = run_exploit(exploit, args.target)
            results.append({"name": f"Exploit: {exploit}", "details": exploit_result})
            commands.append(f"run_exploit {exploit} {args.target}")

    # Guardar resultados
    if results:
        print("\n[INFO] Resultados encontrados:")
        for result in results:
            print(f" - {result['name']}: {result['details']}")
        save_results_to_file(results, commands)
    else:
        print("\n[INFO] No se detectaron vulnerabilidades.")

if __name__ == "__main__":
    main()

