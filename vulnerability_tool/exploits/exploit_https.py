import requests

def execute(target):
    """
    Verifica y explota la falta de HTTPS en un sitio web.
    """
    print(f"\n[INFO] Verificando HTTPS en: {target}")
    vulnerable = False
    findings = []

    try:
        # Probar conexión HTTP
        response_http = requests.get(f"http://{target}", timeout=5, allow_redirects=False)
        if response_http.status_code in [301, 302] and "https://" in response_http.headers.get("Location", ""):
            print("[INFO] El sitio redirige correctamente de HTTP a HTTPS.")
        else:
            print("[ALERTA] El sitio no redirige de HTTP a HTTPS.")
            findings.append("No redirección HTTP a HTTPS")
            vulnerable = True

        # Probar conexión HTTPS directamente
        try:
            response_https = requests.get(f"https://{target}", timeout=5)
            if response_https.status_code == 200:
                print("[INFO] El sitio tiene HTTPS habilitado.")
            else:
                print("[ALERTA] No se pudo establecer una conexión HTTPS válida.")
                findings.append("HTTPS no responde correctamente")
                vulnerable = True
        except requests.exceptions.SSLError:
            print("[ALERTA] Error de conexión segura (falta HTTPS o configuración incorrecta).")
            findings.append("Error SSL/TLS al conectar con HTTPS")
            vulnerable = True

    except Exception as e:
        print(f"[ERROR] Error al verificar HTTPS: {e}")

    # Generar reporte
    if findings:
        with open("https_exploit_report.txt", "w") as report:
            report.write("Reporte de vulnerabilidades relacionadas con HTTPS:\n\n")
            for finding in findings:
                report.write(f"- {finding}\n")
        print("[INFO] Reporte generado: https_exploit_report.txt")

    return "Falta de HTTPS detectada" if vulnerable else "HTTPS configurado correctamente"
