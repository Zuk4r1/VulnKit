import requests
from bs4 import BeautifulSoup

def execute(target):
    """
    Verifica la ausencia del encabezado X-Frame-Options y realiza un ataque simulado de Clickjacking.
    """
    print(f"\n[INFO] Verificando encabezado X-Frame-Options en: {target}")
    vulnerable = False
    details = []

    try:
        # Realizar solicitud al sitio objetivo (usamos HTTPS por defecto)
        response = requests.get(f"https://{target}", timeout=10)

        # Verificar encabezado X-Frame-Options
        x_frame_header = response.headers.get('X-Frame-Options', None)
        if not x_frame_header:
            print("[ALERTA] Falta el encabezado X-Frame-Options. El sitio podría ser vulnerable a Clickjacking.")
            details.append("Encabezado X-Frame-Options: Faltante")
            vulnerable = True

            # Simulación activa de Clickjacking
            print("[INFO] Probando simulación activa de Clickjacking...")
            if simulate_clickjacking(response.text, target):
                print("[ALERTA] La prueba de Clickjacking fue exitosa. El sitio es vulnerable.")
                details.append("Prueba de Clickjacking: Exitosa")
            else:
                print("[INFO] No se pudo explotar Clickjacking con el contenido actual del sitio.")
                details.append("Prueba de Clickjacking: Fallida")

            # Verificar encabezado Content-Security-Policy
            csp_header = response.headers.get('Content-Security-Policy', None)
            if csp_header and 'frame-ancestors' in csp_header:
                print("[INFO] Se detectó la directiva 'frame-ancestors' en Content-Security-Policy.")
                details.append("Content-Security-Policy: frame-ancestors presente")
            else:
                print("[ALERTA] No se detectaron controles alternativos como 'frame-ancestors'.")
                details.append("Content-Security-Policy: Sin frame-ancestors")
        else:
            print(f"[INFO] El encabezado X-Frame-Options está presente: {x_frame_header}")
            details.append(f"Encabezado X-Frame-Options: Presente ({x_frame_header})")

    except requests.exceptions.RequestException as e:
        print(f"[ERROR] Error al conectar con el objetivo: {e}")
        details.append(f"Error de conexión: {e}")
    except Exception as e:
        print(f"[ERROR] Error inesperado: {e}")
        details.append(f"Error inesperado: {e}")

    # Formatear la salida para que sea compatible con el archivo de resultados
    return {
        "vulnerable": vulnerable,
        "details": "\n".join(details)  # Convertimos la lista de detalles en una cadena de texto
    }

def simulate_clickjacking(html_content, target):
    """
    Simula un ataque de Clickjacking cargando contenido del sitio objetivo en un iframe virtual.
    Verifica si se puede acceder a elementos clave del DOM.
    """
    try:
        soup = BeautifulSoup(html_content, 'html.parser')

        # Buscar elementos interactivos clave (botones, formularios, enlaces)
        interactive_elements = soup.find_all(['button', 'a', 'input', 'form'])
        if not interactive_elements:
            print("[INFO] No se encontraron elementos interactivos en la página para Clickjacking.")
            return False

        print(f"[INFO] Se encontraron {len(interactive_elements)} elementos interactivos. Intentando interactuar...")
        for element in interactive_elements[:5]:  # Limitar pruebas a los primeros 5 elementos
            if element.name == 'button' or element.name == 'a':
                print(f"[INFO] Probando interacción con un elemento: {element}")
                return True
            if element.name == 'form' and element.get('action'):
                print(f"[INFO] Probando envío de formulario: {element}")
                return True
            if element.name == 'input' and element.get('type') in ['submit', 'button']:
                print(f"[INFO] Probando interacción con un input: {element}")
                return True

        print("[INFO] La simulación de Clickjacking no pudo acceder a elementos interactivos clave.")
        return False
    except Exception as e:
        print(f"[ERROR] Error al analizar la página: {e}")
        return False